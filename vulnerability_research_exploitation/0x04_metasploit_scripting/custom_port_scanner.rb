require 'msf/core'
require 'socket'

class MetasploitModule < Msf::Auxiliary
  include Msf::Auxiliary::Scanner

  def initialize
    register_options(
      [
        Opt::RPORT(80),            
        Opt::RHOSTS,              
        OptInt.new('PORT_RANGE', [true, 'Port range to scan (start:end)', '1:1024'])
      ], self.class
    )
  end

  def check_port(target_ip, port)
    begin
      socket = Socket.new(:INET, :STREAM)
      sockaddr = Socket.sockaddr_in(port, target_ip)
      socket.connect_nonblock(sockaddr)
      socket.close
      return true
    rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
      return false
    rescue Errno::ETIMEDOUT, Errno::ENETUNREACH
      return false
    rescue => e
      print_error("Error checking port #{port}: #{e.message}")
      return false
    end
  end

  def run_host(target_ip)
    port_range = datastore['PORT_RANGE'].split(':')
    start_port = port_range[0].to_i
    end_port = port_range[1].to_i

    print_status("Scanning ports #{start_port}-#{end_port} on #{target_ip}...")

    (start_port..end_port).each do |port|
      if check_port(target_ip, port)
        print_good("Port #{port} is open on #{target_ip}")
      else
        print_status("Port #{port} is closed on #{target_ip}")
      end
    end
  end
end
